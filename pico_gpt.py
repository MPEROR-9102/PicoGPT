{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nfrom torch.nn import functional as F\n\ntorch.manual_seed(1337)\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nbatch_size = 64\nblock_size = 256\nn_embd = 384\n# head_size = no. of embedding dimension // no. of heads\nn_head = 6\nn_layer = 6\ndropout = 0.2\nmax_iters = 5000\neval_iters = 500\n\n\n!wget https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt\nwith open(\"input.txt\", 'r', encoding=\"utf-8\") as f:\n    text = f.read()\n\nchars = sorted(list(set(text)))\nvocab_size = len(chars)\nstoi = {ch:i for i, ch in enumerate(chars)}\nitos = {i:ch for i, ch in enumerate(chars)}\nencode = lambda s: [stoi[ch] for ch in s]\ndecode = lambda l: ''.join([itos[i] for i in l])\n\ndata = torch.tensor(encode(text), dtype=torch.long)\nn = int(0.9*len(data))\ntrain_data = data[:n]\nval_data = data[n:]\n\ndef get_batch(split):\n    data = train_data if split=='train' else val_data\n    ix = torch.randint(len(data)-block_size, (batch_size,))\n    x = torch.stack([data[i:i+block_size] for i in ix]).to(device)\n    y = torch.stack([data[i+1:i+block_size+1] for i in ix]).to(device)\n    return x, y\n\nxb, yb = get_batch('train')\nprint('inputs')\nprint(xb.shape)\nprint(xb)\nprint('targets')\nprint(yb.shape)\nprint(yb)\n\n\nclass Head(nn.Module):\n    \n    def __init__(self, head_size):\n        super().__init__()\n        self.query = nn.Linear(n_embd, head_size, bias=False)\n        self.key = nn.Linear(n_embd, head_size, bias=False)\n        self.value = nn.Linear(n_embd, head_size, bias=False)\n        self.dropout = nn.Dropout(dropout)\n        self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))\n    \n    def forward(self, x):\n        B,T,C = x.shape\n        q = self.query(x)\n        k = self.key(x)\n        \n        wei = q @ k.transpose(-2,-1) * C**-0.5\n        wei = wei.masked_fill(self.tril[:T,:T] == 0, float(\"-inf\"))\n        wei = F.softmax(wei, dim=-1)\n        wei = self.dropout(wei)\n        \n        v = self.value(x)\n        out = wei @ v\n        return out\n    \n    \nclass MultiHeadAttention(nn.Module):\n    \n    def __init__(self, num_head, head_size):\n        super().__init__()\n        self.heads = nn.ModuleList([Head(head_size) for _ in range(num_head)])\n        self.proj = nn.Linear(n_embd, n_embd )\n        self.dropout = nn.Dropout(dropout)\n    \n    def forward(self, x):\n        out = torch.concat([h(x) for h in self.heads], dim=-1)\n        out = self.dropout(self.proj(out))\n        return out\n    \n\nclass FeedForward(nn.Module):\n    \n    def __init__(self, n_embd):\n        super().__init__()\n        self.net = nn.Sequential(\n            nn.Linear(n_embd, 4 * n_embd),\n            nn.ReLU(),\n            nn.Linear(4 * n_embd, n_embd),\n            nn.Dropout(dropout)\n        )\n        \n    def forward(self, x):\n        return self.net(x)\n    \n    \nclass Block(nn.Module):\n    \n    def __init__(self, n_embd, n_head):\n        super().__init__()\n        head_size = n_embd // n_head\n        self.sa_head = MultiHeadAttention(n_head, head_size)\n        self.ffwd = FeedForward(n_embd)\n        self.ln1 = nn.LayerNorm(n_embd)\n        self.ln2 = nn.LayerNorm(n_embd)\n        \n    def forward(self, x):\n        x = x + self.sa_head(self.ln1(x))\n        x = x + self.ffwd(self.ln2(x))\n        return x\n    \n\nclass BigramLanguageModel(nn.Module):\n    \n    def __init__(self):\n        super().__init__()\n        self.token_embedding_table = nn.Embedding(vocab_size, n_embd)\n        self.position_embedding_table = nn.Embedding(block_size, n_embd) \n        self.block = nn.Sequential(*[Block(n_embd, n_head=n_head) for _ in range(n_layer)])\n        self.lm_head = nn.Linear(n_embd, vocab_size)\n        \n    def forward(self, idx, targets=None):\n        B,T = idx.shape\n        tok_emb = self.token_embedding_table(idx)\n        pos_emb = self.position_embedding_table(torch.arange(T, device=device))\n        x = tok_emb + pos_emb\n        x = self.block(x)\n        logits = self.lm_head(x)\n        loss = None\n        if targets != None:\n            B,T,C = logits.shape\n            loss = F.cross_entropy(logits.view(B*T, C), targets.view(B*T))\n        return logits, loss\n    \n    def generate(self, idx, max_new_tokens):\n        for _ in range(max_new_tokens):\n            idx_cond = idx[:,-block_size:]\n            logits, _ = self(idx_cond)\n            logits = logits[:,-1,:]\n            prob = F.softmax(logits, dim=-1)\n            idx_next = torch.multinomial(prob, num_samples=1)\n            idx = torch.concat([idx, idx_next], dim=1)\n        return idx\n\n\n@torch.no_grad()\ndef estimate_loss():\n    out = {}\n    model.eval()\n    for split in ['train', 'val']:\n        losses = torch.zeros(eval_iters)\n        for k in range(eval_iters):\n            xb, yb = get_batch(split)\n            logits, loss = model(xb, yb)\n            losses[k] = loss.item()\n        out[split] = losses.mean()\n    model.train()\n    return out\n\n    \n    \nmodel = BigramLanguageModel().to(device)\nprint(model)\n\noptimizer = torch.optim.AdamW(model.parameters(), lr=3e-4)\n\nfor _iter in range(max_iters):\n    xb, yb = get_batch('train')\n    logits, loss = model(xb, yb)\n    optimizer.zero_grad(set_to_none=True)\n    loss.backward()\n    optimizer.step()\n    if _iter % eval_iters == 0:\n        out = estimate_loss()\n        print(f\"train loss: {out['train']:.4f}, val loss: {out['val']:.4f}\")\n\nprint(decode(model.generate(torch.zeros((1, 1), dtype=torch.long).to(device), 1000)[0].tolist()))","metadata":{"_uuid":"daa3b30d-326b-4edd-accf-20f489328d8e","_cell_guid":"0b2eb271-5085-4941-919a-0748b28c60f4","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-08-21T18:01:13.859618Z","iopub.execute_input":"2024-08-21T18:01:13.860077Z","iopub.status.idle":"2024-08-21T18:38:40.398662Z","shell.execute_reply.started":"2024-08-21T18:01:13.860042Z","shell.execute_reply":"2024-08-21T18:38:40.397405Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"--2024-08-21 18:01:14--  https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.111.133, 185.199.109.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1115394 (1.1M) [text/plain]\nSaving to: 'input.txt.1'\n\ninput.txt.1         100%[===================>]   1.06M  --.-KB/s    in 0.04s   \n\n2024-08-21 18:01:15 (26.2 MB/s) - 'input.txt.1' saved [1115394/1115394]\n\ninputs\ntorch.Size([64, 256])\ntensor([[ 0, 26, 53,  ..., 56, 43, 47],\n        [60, 43, 56,  ..., 56,  1, 41],\n        [26, 21, 33,  ..., 26, 21, 13],\n        ...,\n        [ 5, 57,  1,  ...,  1, 35, 47],\n        [56, 53, 53,  ..., 59, 50, 42],\n        [42, 47, 56,  ..., 39, 56,  1]], device='cuda:0')\ntargets\ntorch.Size([64, 256])\ntensor([[26, 53, 58,  ..., 43, 47, 45],\n        [43, 56,  1,  ...,  1, 41, 53],\n        [21, 33, 31,  ..., 21, 13, 10],\n        ...,\n        [57,  1, 52,  ..., 35, 47, 50],\n        [53, 53, 58,  ..., 50, 42,  1],\n        [47, 56, 43,  ..., 56,  1, 51]], device='cuda:0')\nBigramLanguageModel(\n  (token_embedding_table): Embedding(65, 384)\n  (position_embedding_table): Embedding(256, 384)\n  (block): Sequential(\n    (0): Block(\n      (sa_head): MultiHeadAttention(\n        (heads): ModuleList(\n          (0-5): 6 x Head(\n            (query): Linear(in_features=384, out_features=64, bias=False)\n            (key): Linear(in_features=384, out_features=64, bias=False)\n            (value): Linear(in_features=384, out_features=64, bias=False)\n            (dropout): Dropout(p=0.2, inplace=False)\n          )\n        )\n        (proj): Linear(in_features=384, out_features=384, bias=True)\n        (dropout): Dropout(p=0.2, inplace=False)\n      )\n      (ffwd): FeedForward(\n        (net): Sequential(\n          (0): Linear(in_features=384, out_features=1536, bias=True)\n          (1): ReLU()\n          (2): Linear(in_features=1536, out_features=384, bias=True)\n          (3): Dropout(p=0.2, inplace=False)\n        )\n      )\n      (ln1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)\n      (ln2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)\n    )\n    (1): Block(\n      (sa_head): MultiHeadAttention(\n        (heads): ModuleList(\n          (0-5): 6 x Head(\n            (query): Linear(in_features=384, out_features=64, bias=False)\n            (key): Linear(in_features=384, out_features=64, bias=False)\n            (value): Linear(in_features=384, out_features=64, bias=False)\n            (dropout): Dropout(p=0.2, inplace=False)\n          )\n        )\n        (proj): Linear(in_features=384, out_features=384, bias=True)\n        (dropout): Dropout(p=0.2, inplace=False)\n      )\n      (ffwd): FeedForward(\n        (net): Sequential(\n          (0): Linear(in_features=384, out_features=1536, bias=True)\n          (1): ReLU()\n          (2): Linear(in_features=1536, out_features=384, bias=True)\n          (3): Dropout(p=0.2, inplace=False)\n        )\n      )\n      (ln1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)\n      (ln2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)\n    )\n    (2): Block(\n      (sa_head): MultiHeadAttention(\n        (heads): ModuleList(\n          (0-5): 6 x Head(\n            (query): Linear(in_features=384, out_features=64, bias=False)\n            (key): Linear(in_features=384, out_features=64, bias=False)\n            (value): Linear(in_features=384, out_features=64, bias=False)\n            (dropout): Dropout(p=0.2, inplace=False)\n          )\n        )\n        (proj): Linear(in_features=384, out_features=384, bias=True)\n        (dropout): Dropout(p=0.2, inplace=False)\n      )\n      (ffwd): FeedForward(\n        (net): Sequential(\n          (0): Linear(in_features=384, out_features=1536, bias=True)\n          (1): ReLU()\n          (2): Linear(in_features=1536, out_features=384, bias=True)\n          (3): Dropout(p=0.2, inplace=False)\n        )\n      )\n      (ln1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)\n      (ln2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)\n    )\n    (3): Block(\n      (sa_head): MultiHeadAttention(\n        (heads): ModuleList(\n          (0-5): 6 x Head(\n            (query): Linear(in_features=384, out_features=64, bias=False)\n            (key): Linear(in_features=384, out_features=64, bias=False)\n            (value): Linear(in_features=384, out_features=64, bias=False)\n            (dropout): Dropout(p=0.2, inplace=False)\n          )\n        )\n        (proj): Linear(in_features=384, out_features=384, bias=True)\n        (dropout): Dropout(p=0.2, inplace=False)\n      )\n      (ffwd): FeedForward(\n        (net): Sequential(\n          (0): Linear(in_features=384, out_features=1536, bias=True)\n          (1): ReLU()\n          (2): Linear(in_features=1536, out_features=384, bias=True)\n          (3): Dropout(p=0.2, inplace=False)\n        )\n      )\n      (ln1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)\n      (ln2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)\n    )\n    (4): Block(\n      (sa_head): MultiHeadAttention(\n        (heads): ModuleList(\n          (0-5): 6 x Head(\n            (query): Linear(in_features=384, out_features=64, bias=False)\n            (key): Linear(in_features=384, out_features=64, bias=False)\n            (value): Linear(in_features=384, out_features=64, bias=False)\n            (dropout): Dropout(p=0.2, inplace=False)\n          )\n        )\n        (proj): Linear(in_features=384, out_features=384, bias=True)\n        (dropout): Dropout(p=0.2, inplace=False)\n      )\n      (ffwd): FeedForward(\n        (net): Sequential(\n          (0): Linear(in_features=384, out_features=1536, bias=True)\n          (1): ReLU()\n          (2): Linear(in_features=1536, out_features=384, bias=True)\n          (3): Dropout(p=0.2, inplace=False)\n        )\n      )\n      (ln1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)\n      (ln2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)\n    )\n    (5): Block(\n      (sa_head): MultiHeadAttention(\n        (heads): ModuleList(\n          (0-5): 6 x Head(\n            (query): Linear(in_features=384, out_features=64, bias=False)\n            (key): Linear(in_features=384, out_features=64, bias=False)\n            (value): Linear(in_features=384, out_features=64, bias=False)\n            (dropout): Dropout(p=0.2, inplace=False)\n          )\n        )\n        (proj): Linear(in_features=384, out_features=384, bias=True)\n        (dropout): Dropout(p=0.2, inplace=False)\n      )\n      (ffwd): FeedForward(\n        (net): Sequential(\n          (0): Linear(in_features=384, out_features=1536, bias=True)\n          (1): ReLU()\n          (2): Linear(in_features=1536, out_features=384, bias=True)\n          (3): Dropout(p=0.2, inplace=False)\n        )\n      )\n      (ln1): LayerNorm((384,), eps=1e-05, elementwise_affine=True)\n      (ln2): LayerNorm((384,), eps=1e-05, elementwise_affine=True)\n    )\n  )\n  (lm_head): Linear(in_features=384, out_features=65, bias=True)\n)\ntrain loss: 3.9957, val loss: 4.0273\ntrain loss: 2.0756, val loss: 2.1428\ntrain loss: 1.6661, val loss: 1.8264\ntrain loss: 1.4866, val loss: 1.6886\ntrain loss: 1.3864, val loss: 1.6110\ntrain loss: 1.3148, val loss: 1.5576\ntrain loss: 1.2629, val loss: 1.5345\ntrain loss: 1.2173, val loss: 1.5080\ntrain loss: 1.1800, val loss: 1.4977\ntrain loss: 1.1436, val loss: 1.4996\n\nA words body!\nAnd yet I'll call 'mong, in't behold's death:\nSo sea as I do love, I have meet have fool'd\nupon my heart in confession,\nAnd thereforth my great gracious leads:\nEither my very best unwolve might\nTo whose did and stain such some reprove frame\ninviret: for him, and makes when my pleasure,\nSit upon my coward strikes brief rot me,\ncontinury, like toise earth;\nWhichood, to be young brother tidings and reign,\nWhich most wondy, by bore the king, he proper esides,\nI fought in her triateful exclament,\nWith this nothing treat of idle each peat,\nThat encounter quick can; add sworb of a king,\nAnd our prefetion with axe home prayers' hour,\nWhen waste stole dwell up me, nothing.\n\nBUSHY:\nMy lord, by more did! forewell, hark!\nMyself cheer up, grace for my glory lord,\nThat fines hearts make my cheek, his king;\nAnd shall play you will be no monague.\n\nKING RICHARD III:\nF You went; and many of the old cheeks,\nTewest: shall wick our world, dost-sadlight:\nYou mock to know at oncection more than\n","output_type":"stream"}]}]}